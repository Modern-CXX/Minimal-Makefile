$ cd myproject
$ ls
Makefile  hello  main
$
$ find . | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
.
|____Makefile
|____hello
| |____Makefile
| |____hello.c
| |____hello.h
|____main
| |____Makefile
| |____main.c
$
$
$ cat Makefile
SUBDIRS = hello main
subdirs : $(SUBDIRS)
$(SUBDIRS) :
  make -C $@
clean :
  for dir in $(SUBDIRS); do \
    make -C $$dir $@; \
  done
.PHONY : $(SUBDIRS) subdirs clean

main : hello
hello :
  make -C $@
  cp hello/hello hello/libhello.so # Linux
  # cp hello/hello hello/libhello.dylib # macOS
$
$
$ cat hello/Makefile
# build shared library with -fPIC, -shared
CFLAGS   = -g -fPIC # -O3 # CXXFLAGS for .cpp
LDFLAGS  = -shared # -L./hello
LDLIBS   = # -lhello
CPPFLAGS = -MMD -MP # -I./hello
#CC      = $(CXX) # link with CXX for .cpp

# building .dylib, macOS
#LDFLAGS += -install_name @rpath/hello

# target name is basename of one of the source files
hello : $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include *.d
clean : ; -rm -fr *.o *.d
.PHONY : clean
$
$
$ cat hello/hello.c
#include <stdio.h>
#include "hello.h"

void hello()
{
  printf("hello\n");
}
$
$
$ cat hello/hello.h
#ifndef _hello_
#define _hello_

void hello();

#endif
$
$
$ cat main/Makefile
# build shared library with -fPIC, -shared
CFLAGS   = -g # -O3 -fPIC # CXXFLAGS for .cpp
LDFLAGS  = -L../hello # -shared
LDLIBS   = -lhello
CPPFLAGS = -MMD -MP -I../hello
#CC      = $(CXX) # link with CXX for .cpp

# linking to .so or .dylib
#LDFLAGS += -Wl,-rpath,../hello

# target name is basename of one of the source files
main : $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include *.d
clean : ; -rm -fr *.o *.d
.PHONY : clean
$
$
$ cat main/main.c
#include <stdio.h>
#include "hello.h"

int main()
{
  printf("main\n");

  //lldb needs rpath to debug .dylib on macOS.
  //The debugger does not use DYLD_LIBRARY_PATH.
  hello();
}
$
