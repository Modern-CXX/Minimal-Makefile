# Why Makefile
# 1. Autotools automake doesn't support $(wildcard) for lazy developers.
# 2. CMake doesn't support CPPFLAGS, LDFLAGS, LDLIBS directly.

# main1 -> libfoo.so -> libbar.so
# main2 -> libfoo.so -> libbar.so

$ cd hello
$ ls src/
bar  foo  main1  main2  Makefile
$

$ find . | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
.
|____.vscode
| |____launch.json
| |____settings.json
| |____tasks.json
|____src
| |____foo
| | |____Makefile
| | |____libfoo.so
| | |____foo.c
| | |____foo.h
| |____main1
| | |____main1.c
| | |____Makefile
| |____Makefile
| |____bar
| | |____bar.c
| | |____libbar.so
| | |____Makefile
| | |____bar.h
| |____main2
| | |____main2.c
| | |____Makefile
$

$ cat src/bar/Makefile
# build shared library with -fPIC, -shared
CFLAGS   = -g -fPIC # -O3 # CXXFLAGS for .cpp
CPPFLAGS = -MMD -MP # -I../xxx
LDFLAGS  = -shared # -L../xxx -Wl,-rpath,'$$ORIGIN/../xxx'
LDLIBS   = # -lxxx
#CC      = $(CXX) # link with CXX for .cpp

# target name is basename of one of the source files
bar : $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include *.d
clean : ; -rm -fr *.o *.d bar
.PHONY : clean
$

$ cat src/foo/Makefile
# build shared library with -fPIC, -shared
CFLAGS   = -g -fPIC # -O3 # CXXFLAGS for .cpp
CPPFLAGS = -MMD -MP -I../bar
LDFLAGS  = -shared -L../bar -Wl,-rpath,'$$ORIGIN/../bar'
LDLIBS   = -lbar
#CC      = $(CXX) # link with CXX for .cpp

# target name is basename of one of the source files
foo : $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include *.d
clean : ; -rm -fr *.o *.d foo
.PHONY : clean
$

$ cat src/main1/Makefile
# build shared library with -fPIC, -shared
CFLAGS   = -g # -O3 -fPIC # CXXFLAGS for .cpp
CPPFLAGS = -MMD -MP -I../foo
LDFLAGS  = -L../foo -Wl,-rpath,'$$ORIGIN/../foo' # -shared
LDLIBS   = -lfoo
#CC      = $(CXX) # link with CXX for .cpp

# target name is basename of one of the source files
main1 : $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include *.d
clean : ; -rm -fr *.o *.d main1
.PHONY : clean
$

$ cat src/main2/Makefile
# build shared library with -fPIC, -shared
CFLAGS   = -g # -O3 -fPIC # CXXFLAGS for .cpp
CPPFLAGS = -MMD -MP -I../foo
LDFLAGS  = -L../foo -Wl,-rpath,'$$ORIGIN/../foo' # -shared
LDLIBS   = -lfoo
#CC      = $(CXX) # link with CXX for .cpp

# target name is basename of one of the source files
main2 : $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include *.d
clean : ; -rm -fr *.o *.d main2
.PHONY : clean
$

$ cat src/Makefile
LIBDIRS = bar foo
MAINDIRS = main1 main2

all : $(LIBDIRS) $(MAINDIRS)
foo : bar
main1 : foo
main2 : foo

$(MAINDIRS) : $(LIBDIRS)
$(LIBDIRS) :
	$(MAKE) -C $@
	cp $@/$@ $@/lib$@.so
$(MAINDIRS) :
	$(MAKE) -C $@
clean :
	for dir in $(LIBDIRS) $(MAINDIRS); do \
		$(MAKE) -C $$dir $@; \
	done
.PHONY : $(LIBDIRS) $(MAINDIRS) all clean
$

$ cat .vscode/launch.json
{
  "configurations": [
    {
      "type": "lldb",
      "request": "launch",
      "name": "Debug",
      "program": "${fileDirname}/${fileBasenameNoExtension}", //new
      "args": [],
      "cwd": "${fileDirname}",
      "preLaunchTask": "make", //new
    }
  ]
}
$

$ cat .vscode/tasks.json
{
  "tasks": [
    {
      "label": "make", //new
      "type": "shell",
      "options": {
        "cwd": "${workspaceFolder}/src",
      },
      "command": "/usr/bin/make", //new
    }
  ]
}
$

$ cat .vscode/settings.json
{
  "clangd.fallbackFlags": [
    // "-std=c++2a",
    // "-I${workspaceFolder}/boost",
    "-I${workspaceFolder}/src/foo",
    "-I${workspaceFolder}/src/bar",
  ],
}
$
