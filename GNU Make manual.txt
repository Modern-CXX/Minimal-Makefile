GNU Make manual
January 2020
https://www.gnu.org/software/make/manual/make.pdf

2.5 Letting make Deduce the Recipes
It is not necessary to spell out the recipes for compiling the individual C source files,
because make can figure them out: it has an implicit rule for updating a ‘.o’ file from
a correspondingly named ‘.c’ file using a ‘cc -c’ command.

4.3.3 The Function wildcard
a makefile to compile all C source files in the directory and then link them together
could be written as follows:

    objects := $(patsubst %.c,%.o,$(wildcard *.c))
    foo : $(objects)
        cc -o foo $(objects)

(This takes advantage of the implicit rule for compiling C programs, so there is no need to
write explicit rules for compiling the files)

4.13 Generating Prerequisites Automatically
use the ‘-MM’ flag
Options Controlling the Preprocessor

10.1 Using Implicit Rules
Because you mention foo.o but do not give a rule for it,
make will automatically look for an implicit rule that tells how to update it.

10.2 Catalogue of Built-In Rules

Compiling C programs:
    $(CC) $(CPPFLAGS) $(CFLAGS) -c

Compiling C++ programs:
    $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c

Linking a single object file: (if there are multiple object files,
one of which has a name matching that of the executable file)
    $(CC) $(LDFLAGS) n.o $(LOADLIBES) $(LDLIBS)
